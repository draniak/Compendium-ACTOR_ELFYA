name: Release Foundry VTT Package

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate module.json syntax
        run: jq empty module.json

      - name: Update manifest URLs in module.json
        run: |
          VERSION="v${GITHUB_RUN_NUMBER}"
          jq --arg ver "${GITHUB_RUN_NUMBER}" \
             --arg manifest_url "https://github.com/draniak/Compendium-ACTOR_ELFYA/raw/$VERSION/module.json" \
             --arg download_url "https://github.com/draniak/Compendium-ACTOR_ELFYA/releases/download/$VERSION/module-zip.txt" \
             '.version = $ver | .manifest = $manifest_url | .download = $download_url' module.json > module.tmp.json
          mv module.tmp.json module.json
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

      - name: Commit and push updated manifest to main
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add module.json
          git commit -m "Update module.json version to v${GITHUB_RUN_NUMBER}"
          git push origin main
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release with unique tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          files: |
            module.json
            module-zip.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release with latest tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest release
          files: |
            module.json
            module-zip.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output current version for debug
        run: jq '.version' module.json
